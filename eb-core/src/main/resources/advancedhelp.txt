Running Activities and Scenarios
================================

PROG always runs a scenario script. However, there are multiple ways to tell
PROG what that script should be.

Any argument in name=value format serves as a parameter to the
script or activity that precedes it.

To create a scenario script that simply runs a single activity to completion,
use this format:
~~~
PROG activity <param>=<value> [...]
~~~

To create a scenario script that runs multiple activities concurrently,
simply add more activities to the list:
~~~
PROG activity <param>=<value> [...] activity <param>=<value> [...]
~~~

To execute a scenario script directly, simply use the format:
~~~
PROG script <scriptname> [param=value [...]]
~~~

For Scenario Designers
======================

You can build up a complex scenario by combining scripts and activities.
If this scenario needs to have some cross-shared logic, that is up to you,
the scenario designer.

## Script Parameters

Any arguments following a script in name=value form will be used to parameterize
the script. Script parameters are simply macro tokens in the form <<NAME:default>>.
All such parameters in the script will be substituted before the script executes,
so parameters may be dropped into scripts ad-hoc.

## Session Names

By using the option --session-name <name>, you can name the session logfile
that will be (over)written with execution details.

## Metric Names

If you need to see what metrics are available for a particular activity type,
you can ask PROG to instantiate an activity of that type and discover the
metrics, dumping out a list. The following form of the command shows you how
to make a copy-and-pastable list:
~~~
PROG --metrics diag anexample
~~~
This will dump a list of metric names in the shortened format that is most suitable
for scenario script development.


